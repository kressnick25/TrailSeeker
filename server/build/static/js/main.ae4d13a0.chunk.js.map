{"version":3,"sources":["icons sync /^/.//.*/.svg$","icons/clear-day.svg","icons/clear-night.svg","icons/cloudy.svg","icons/fog.svg","icons/partly-cloudy-day.svg","icons/partly-cloudy-night.svg","icons/rain.svg","icons/snow.svg","icons/wind.svg","helpers.js","WeatherForecast.js","Trail.js","Content.js","App.js","serviceWorker.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","capitalizeAll","string","replace","a","toUpperCase","WeatherForecast","props","data","className","day","align","dateInt","date","Date","getDay","getDayInitial","time","Popup","header","icon","content","temperatureHigh","temperatureLow","trigger","src","require","alt","width","height","TravelInfo","href","lat","lng","target","Icon","name","distance","duration","Trail","useState","descActive","setActive","Card","color","Content","Header","Rating","disabled","defaultRating","rating","maxRating","Accordion","Title","active","onClick","description","length","difficulty","charAt","slice","lon","weather","url","setData","useEffect","fetch","method","headers","body","JSON","stringify","location","toString","then","response","json","catch","err","Container","textAlign","Group","centered","trail","key","Loader","size","GEOLOCATION_API","App","setLocation","loading","setLoading","Segment","inverted","as","style","Subheader","Divider","Button","primary","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ae4d13a0.chunk.js","sourcesContent":["var map = {\n\t\"./clear-day.svg\": 299,\n\t\"./clear-night.svg\": 300,\n\t\"./cloudy.svg\": 301,\n\t\"./fog.svg\": 302,\n\t\"./partly-cloudy-day.svg\": 303,\n\t\"./partly-cloudy-night.svg\": 304,\n\t\"./rain.svg\": 305,\n\t\"./snow.svg\": 306,\n\t\"./wind.svg\": 307\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 298;","module.exports = __webpack_public_path__ + \"static/media/clear-day.53f709c5.svg\";","module.exports = __webpack_public_path__ + \"static/media/clear-night.b87ca8b6.svg\";","module.exports = __webpack_public_path__ + \"static/media/cloudy.79b3c647.svg\";","module.exports = __webpack_public_path__ + \"static/media/fog.3694ef67.svg\";","module.exports = __webpack_public_path__ + \"static/media/partly-cloudy-day.534afba6.svg\";","module.exports = __webpack_public_path__ + \"static/media/partly-cloudy-night.675a7cdd.svg\";","module.exports = __webpack_public_path__ + \"static/media/rain.316ec331.svg\";","module.exports = __webpack_public_path__ + \"static/media/snow.35404d3a.svg\";","module.exports = __webpack_public_path__ + \"static/media/wind.2a8661ec.svg\";","export function capitalizeFirst(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nexport function capitalizeAll(string){\n    return string.replace(/(?:^|\\s)\\S/g, (a) =>  a.toUpperCase() );\n}\n\nexport function removeDash(string) {\n    return string.replace(/-/g, \" \");\n}","import React from 'react';\nimport {capitalizeAll, removeDash} from \"./helpers\";\nimport {Popup} from 'semantic-ui-react';\n\nexport function WeatherForecast(props) {\n    let data = props.data;\n    return (\n        <div className={'weatherForecast'}>\n            Forecast:<br/>\n            <span>\n                <table>\n                    <tr>\n                    {data.map(day =>\n                        <td align={'center'}>{getDayInitial(day.time)}</td>\n                    )}\n                    </tr>\n                    <tr>\n                    {data.map(day =>\n                        <td>\n                            <Popup\n                                header={capitalizeAll( removeDash(day.icon ))}\n                                content={`High: ${day.temperatureHigh} Low: ${day.temperatureLow}`}\n                                trigger={<img src={require(`./icons/${day.icon}.svg`)}\n                                              alt={'icon'}\n                                              width={'28em'}\n                                              height={'36em'}/>}\n                            />\n                        </td>\n                    )}\n                    </tr>\n                </table>\n            </span>\n        </div>\n    )\n}\n\nfunction getDayInitial(dateInt) {\n    let days = ['Su', 'M', 'T', 'W', 'Th', 'F', 'S'];\n    let date = new Date(dateInt * 1000);\n    return days[date.getDay()];\n}\n\nexport default WeatherForecast;","import React, {useState} from \"react\";\nimport {Card, Icon, Accordion, Rating, Divider} from 'semantic-ui-react';\nimport {capitalizeFirst} from \"./helpers\";\nimport WeatherIcon from 'react-icons-weather';\nimport WeatherForecast from \"./WeatherForecast\";\n\n\n\nexport function Trail (props) {\n    let data = props.data;\n    const [descActive, setActive] = useState(false);\n    return (\n      <Card color='green'>\n          <Card.Content>\n              <Card.Header>{data.name}</Card.Header>\n              <Rating icon='star' disabled defaultRating={data.rating} maxRating={5} />\n              <Accordion>\n                  <Accordion.Title active={descActive} onClick={e=> setActive(!descActive)}>\n                      <Icon name='dropdown' />\n                      Description\n                  </Accordion.Title>\n                  <Accordion.Content active={descActive}>\n                      <p>{data.description}</p><br />\n                  </Accordion.Content>\n              </Accordion>\n              <p>Length: {data.length} km</p>\n              <p>Difficulty: <b>{data.difficulty ? capitalizeFirst(data.difficulty) : \"Unknown\"}</b></p>\n              {data.distance &&\n              <TravelInfo lat={data.lat} lng={data.lon} distance={data.distance} duration={data.duration} />}\n              <WeatherForecast data={data.weather}/>\n          </Card.Content>\n      </Card>\n    )\n}\n\nfunction TravelInfo(props) {\n    const MapsUrlApi = \"https://www.google.com/maps/search/?api=1&query=\"\n    \n    return (\n        <a href={MapsUrlApi + props.lat + ',' + props.lng} target=\"_blank\">\n            <p><Icon name='car' />{props.distance}, {props.duration}</p>\n        </a>\n    )\n}\n\nexport default Trail;","import React, {useState, useEffect} from 'react';\nimport Trail from './Trail';\nimport {Card, Container, Loader, Transition} from 'semantic-ui-react';\n\nconst url = \"http://localhost:3000/\";\n\nexport function Content (props) {\n    const [data, setData] = useState();\n    useEffect(() => {\n        fetch(url, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n              },\n            body: JSON.stringify({\n                lat: props.location.lat.toString(),\n                lng: props.location.lng.toString(),\n            }\n        )})\n            .then(response => response.json())\n            .then(body => setData(body))\n            .catch(err => err);\n    }, [/*location*/])\n    if (!data) return <Loader active size='large'>Loading</Loader>\n\n\n    return (\n        <Container textAlign='justified'>\n            <Card.Group centered>\n                {   data.map(trail => <Trail data={trail} key={trail.id}/> )}\n            </Card.Group>\n        </Container>\n    ) \n}\n\nexport default Content;","import React, {useState} from 'react';\nimport './App.css';\nimport Content from \"./Content\"\nimport {Button, Header, Divider, Container, Segment, Icon} from \"semantic-ui-react\";\n\nconst GEOLOCATION_API = \"https://www.googleapis.com/geolocation/v1/geolocate?key=AIzaSyBAeo-vXKY-RSDl3YIT2SKsDZrc67ejQWU\";\n\nfunction App() {\n  const [location, setLocation] = useState();\n  const [loading, setLoading] = useState(false);\n  function handleMyLocation(e) {\n    setLoading(true);\n    fetch(GEOLOCATION_API, {method: 'post'})\n            .then(response => response.json())\n            .then(body => {\n              setLocation(body.location);\n              setLoading(false);  \n            })\n            .catch(err => err);\n  }\n  return (\n    <div className=\"App\">\n        <Container>\n            <Segment inverted color={'olive'}>\n            <Header as='h1' style={{'pad-top': '5px'}}>\n                TrailSeeker\n                <Header.Subheader>Welcome to Trail Seeker</Header.Subheader>\n            </Header>\n            </Segment>\n            <Divider/>\n            { location ?\n              <Content location={location} /> :\n              <Button primary loading={loading} onClick={e => handleMyLocation()}><Icon name={'location arrow'}/>Use My Location</Button>\n            }\n        </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}